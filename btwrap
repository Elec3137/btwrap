#!/bin/sh
r="\033[31;1m"
c="\033[36;1m"
e="\033[0m"
dict_path="/usr/share/dict/cracklib-small"


print_usage(){
printf "${c}Shell wrapper for btrfs snapshots (creation, cleanup, space usage polling)${e}

${c}Global options${e}
    -q                  ${c}quiet${e} (suppress minor warnings and all confirmations)

${c}Actions${e}
    -C <subvolume>      ${c}create${e} a subvolume '.snapshots' under specified subvolume
    -S                  ${c}snapshot${e} every subvolume that contains a '.snapshots' subvolume
    -D                  ${r}delete${e} the oldest snapshot from each '.snapshots' subvolume
    -L                  ${c}list${e} all snapshots
    -d                  poll for ${c}disk usage${e} summary of each '.snapshots' subvolume
    -G                  update ${c}grub${e} (for grub-btrfs)
${c}Options${e}
    -m <path>           specify the subvolume instead of searching (for D,S,d)

Action order: list > create > delete > snapshot > grub
${c}Example usage:${e}
btwrap -C /home     # creates subvolume /home/.snapshots
btwrap -Sm /home    # snapshots /home subvolume into /home/.snapshots/<name>
btwrap -SD          # for each '.snapshots' subvolume: delete the oldest snapshot within and then snapshot the parent subvolume into it
";}

sfd(){  # finds only toplevel directories with the name ".snapshots"
#sudo find / -name .snapshots -prune -name ".snapshots" 2>/dev/null
fd -H "\.snapshots" / | grep -vE "/.snapshots/.*.snapshots/"
}

printf "$r"
while getopts m:LdC:Sn:DqG flag; do
    case "${flag}" in
            q) quiet=true;;
        C) create=${OPTARG};;
        S) snapshot=true;;
        D) delete=true;;
        L) list=true;;
        d) du=true;;
        G) grub=true;;
            m) path=${OPTARG};;
        *) print_usage
            exit 1 ;;
    esac
done
printf "$e"


if [ "$list" = true ]; then
    if [ -z "$path" ]; then   # if $path is empty
        sudo btrfs subv list -st /
    else
        sudo btrfs subv list -sto "$path"
    fi
fi
if [ "$du" = "true" ]; then
    [ ! "$quiet" = "true" ] && printf "${c}be patient please! this may take a while:${e}\n"
    if [ -z "$path" ]; then
        for i in $(sfd); do
            sudo btrfs filesystem du -s "$i"
        done
    else
        sudo btrfs filesystem du -s "$path/.snapshots"
    fi
fi


if [ -n "$create" ]; then

    # if $create is NOT a btrfs subvolume but is still on a btrfs filesystem
    if [ ! "$(stat --format=%i "$create")" -eq 256 ] && [ "$(stat -f --format=%T "$create")" = "btrfs" ] ; then
        sudo mv "$create" "$create.old" || exit # tries to move $create to a subdirectory of itself if it ends in a "/"
        sudo btrfs subv create "$create" || exit
        sudo chown "$USER" "$create" || exit
        sudo mv "$create".old/* "$create/" || exit
        sudo rm -rf "$create.old"
    fi

    sudo btrfs subv create "$create/.snapshots" # prints "ERROR: Could not create subvolume: File exists" if there's something else already there
fi


if [ "$delete" = true ]; then
    if [ -z "$path" ]; then   # $path is empty
        for i in $(sfd); do
            # needs a weird "echo" (to output it all at once to awk?)
            # echoed command MUST not be in double quotes (why?)
            target=$(echo $(sudo ls -t --time creation "$i") | awk '{print $1}')

            if [ -n "$target" ]; then
                sudo btrfs subv delete "${i}/$target"
            else
                [ ! "$quiet" = "true" ] && printf "${c}no snapshots to delete in '$i', skipping deletion of:${e} ${i}/$target\n"
            fi
        done
    else
        # needs a weird "echo" (to output it all at once to awk?)
        # echoed command MUST not be in double quotes (why?)
        target=$(echo $(sudo ls -t --time creation "$path/.snapshots") | awk '{print $1}')

        if [ -n "$target" ]; then
            sudo btrfs subv delete "${path}/.snapshots/$target"
        else
            [ ! "$quiet" = "true" ] && printf "${c}no snapshots to delete in '$path/.snapshots/', skipping deletion of:${e} ${path}/.snapshots/$target\n"
        fi
    fi
fi


if [ "$snapshot" = true ]; then
    rand=$(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -d' ' -f1)

    if [ -r $dict_path ]; then  # if $dict_path DOES exist and is readable
        name=$(shuf -n 1 $dict_path)$rand
    else
        [ ! "$quiet" = "true" ] && printf "${c}Unreadable or DNE: ${dict_path} falling back to just random int${e}\n"
        name=$rand
    fi


    if [ -z "$path" ]; then   # if $path is empty
        for i in $(sfd); do
            sudo btrfs subv snap -r "$i/../" "$i/$name"
        done
    else
        sudo btrfs subv snap -r "$path" "$path/.snapshots/$name"
    fi
fi

if [ "$grub" = "true" ]; then
    sudo grub-mkconfig -o /boot/grub/grub.cfg
fi

