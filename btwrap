#!/bin/dash
r="\033[31;1m"
c="\033[36;1m"
e="\033[0m"
dict_path="/usr/share/dict/cracklib-small"

# TO DO:
# add $dict_path logic or replacement
# check whether path is a subvolume for some actions
# consider further features: option to create rw snapshots
# consider adding interactive confirmation (since this can delete important data with a mistake), integrate with -q

print_usage(){
printf "${c}Shell wrapper for btrfs snapshots (creation, cleanup, space usage polling)${e}
Deps: btrfs-progs fd sudo ${dict_path}

${c}Global options${e}
    -q           quiet (suppress minor warnings and all confirmations)

${c}Only one action (capital letter) per command for simplicity${e}
btwrap -L
    list all snapshots accessible from working directory
        -d      additionally poll for ${c}disk usage${e} of each '.snapshots' subvolume (takes a while)
btwrap -C <subvolume>
    create a subvolume '.snapshots' under specified subvolume

${c}Snapshot managment options${e}
    -m <path>    specify the subvolume instead of searching
    -n <name>    specify the name of the snapshot to be created/deleted
btwrap -S
    snapshot every accessible subvolume that contains a '.snapshots' subvolume
btwrap -D
    delete the oldest snapshot from each detected '.snapshots' subvolume

${c}Example usage:${e}
btwrap -C /home   # creates subvolume /home/.snapshots
btwrap -Sm /home   # snapshots home subvolume into /home/.snapshots
";}
while getopts m:LdC:Sn:Dq flag; do
    case "${flag}" in
            q) quiet=true;;
        L) list=true;;
            d) du=true;;
        C) create=${OPTARG};;

            m) path=${OPTARG};;
            n) name=${OPTARG};;
        S) snapshot=true;;
        D) delete=true;;
        *) print_usage
            exit 1 ;;
    esac
done

if [ "$list" ]; then
    if [ -z $path ]; then   # if $path is empty
        sudo btrfs subv list -st /
        if [ "$du" ]; then
            [ ! "$quiet" ] && printf "${c}be patient please! this may take a while:${e}\n"
            for i in $(fd -HF ".snapshots" /); do
                sudo btrfs filesystem du -s $i
            done
        fi
    else
        sudo btrfs subv list -st $path
        if [ "$du" ]; then
            [ ! "$quiet" ] && printf "${c}be patient please! this may take a while:${e}\n"
            sudo btrfs filesystem du -s $path/.snapshots
        fi
    fi


elif [ ! -z "$create" ]; then
    sudo btrfs subv create $create/.snapshots # prints "ERROR: Could not create subvolume: File exists" if there's something else already there


elif [ "$snapshot" ]; then
    if [ -z $name ]; then   # if name is empty (try getting a word)
        rand=$(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -d' ' -f1)
        if [ -r $dict_path ]; then  # if $dict_path DOES exist and is readable
            name=$(shuf -n 1 $dict_path)$rand

        else
            printf "${r}Unreadable or DNE: ${dict_path} falling back to just random int${e}\n"
            name=$rand
        fi
    fi

    if [ -z $path ]; then   # if $path is empty
        for i in $(fd -HF ".snapshots" /); do
            sudo btrfs subv snap -r $i../ $i$name
        done
    else
        sudo btrfs subv snap -r $path $path/.snapshots/$name
    fi


elif [ "$delete" ]; then
    if [ -z $name ] && [ -z $path ]; then   # if $name && $path are empty
    for i in $(fd -HF ".snapshots" /); do
        sudo btrfs subv delete ${i}$(echo $(sudo ls -t --time creation $i) | awk '{print $NF}')
    done
    elif [ -z $path ]; then
    for i in $(fd -HF ".snapshots" /); do
        sudo btrfs subv delete ${i}$name
    done
    elif [ -z $name ]; then
        sudo btrfs subv delete ${path}$(echo $(sudo ls -t --time creation $path/.snapshots) | awk '{print $NF}')
    else
        sudo btrfs subv delete ${path}$name
    fi

else
print_usage
exit 1
fi
